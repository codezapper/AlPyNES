from utils import check_bit


class VRAM:
    def __init__(self, chr_rom):
        self.data = [0] * 0x3FFF
        self.data[0:0x1FFF] = chr_rom
        self._PALETTE = [
            [0x80, 0x80, 0x80], [0x00, 0x3D, 0xA6], [0x00, 0x12, 0xB0], [0x44, 0x00, 0x96], [0xA1, 0x00, 0x5E], [0xC7, 0x00, 0x28], [0xBA, 0x06, 0x00], [0x8C, 0x17, 0x00], [0x5C, 0x2F, 0x00], [0x10, 0x45, 0x00],
            [0x05, 0x4A, 0x00], [0x00, 0x47, 0x2E], [0x00, 0x41, 0x66], [0x00, 0x00, 0x00], [0x05, 0x05, 0x05], [0x05, 0x05, 0x05], [0xC7, 0xC7, 0xC7], [0x00, 0x77, 0xFF], [0x21, 0x55, 0xFF], [0x82, 0x37, 0xFA],
            [0xEB, 0x2F, 0xB5], [0xFF, 0x29, 0x50], [0xFF, 0x22, 0x00], [0xD6, 0x32, 0x00], [0xC4, 0x62, 0x00], [0x35, 0x80, 0x00], [0x05, 0x8F, 0x00], [0x00, 0x8A, 0x55], [0x00, 0x99, 0xCC], [0x21, 0x21, 0x21],
            [0x09, 0x09, 0x09], [0x09, 0x09, 0x09], [0xFF, 0xFF, 0xFF], [0x0F, 0xD7, 0xFF], [0x69, 0xA2, 0xFF], [0xD4, 0x80, 0xFF], [0xFF, 0x45, 0xF3], [0xFF, 0x61, 0x8B], [0xFF, 0x88, 0x33], [0xFF, 0x9C, 0x12],
            [0xFA, 0xBC, 0x20], [0x9F, 0xE3, 0x0E], [0x2B, 0xF0, 0x35], [0x0C, 0xF0, 0xA4], [0x05, 0xFB, 0xFF], [0x5E, 0x5E, 0x5E], [0x0D, 0x0D, 0x0D], [0x0D, 0x0D, 0x0D], [0xFF, 0xFF, 0xFF], [0xA6, 0xFC, 0xFF],
            [0xB3, 0xEC, 0xFF], [0xDA, 0xAB, 0xEB], [0xFF, 0xA8, 0xF9], [0xFF, 0xAB, 0xB3], [0xFF, 0xD2, 0xB0], [0xFF, 0xEF, 0xA6], [0xFF, 0xF7, 0x9C], [0xD7, 0xE8, 0x95], [0xA6, 0xED, 0xAF], [0xA2, 0xF2, 0xDA],
            [0x99, 0xFF, 0xFC], [0xDD, 0xDD, 0xDD], [0x11, 0x11, 0x11], [0x11, 0x11, 0x11]
        ]
        self._latch_toggle = False
        self.palette = [[0] * 4 for i in range(8)]

    def write(self, address, value):
        # Mirror memory
        while (address > 0x3FFF):
            address -= 0x3FF

        self.data[address] = value

        if (address >= 0x3F00):
            self.update_palette()

    def read(self, address):
        # Mirror memory
        while (address > 0x3FFF):
            address -= 0x3FF
        return self.data[address]
    
    def update_palette(self):
        self.palette[0][0] = self.data[0x3F00]
        self.palette[0][1] = self.data[0x3F01]
        self.palette[0][2] = self.data[0x3F02]
        self.palette[0][3] = self.data[0x3F03]

        self.palette[1][0] = self.data[0x3F00]
        self.palette[1][1] = self.data[0x3F05]
        self.palette[1][2] = self.data[0x3F06]
        self.palette[1][3] = self.data[0x3F07]

        self.palette[2][0] = self.data[0x3F00]
        self.palette[2][1] = self.data[0x3F09]
        self.palette[2][2] = self.data[0x3F0A]
        self.palette[2][3] = self.data[0x3F0B]

        self.palette[3][0] = self.data[0x3F00]
        self.palette[3][1] = self.data[0x3F0D]
        self.palette[3][2] = self.data[0x3F0E]
        self.palette[3][3] = self.data[0x3F0F]

        self.palette[4][0] = self.data[0x3F00]
        self.palette[4][1] = self.data[0x3F11]
        self.palette[4][2] = self.data[0x3F12]
        self.palette[4][3] = self.data[0x3F13]

        self.palette[5][0] = self.data[0x3F00]
        self.palette[5][1] = self.data[0x3F15]
        self.palette[5][2] = self.data[0x3F16]
        self.palette[5][3] = self.data[0x3F17]

        self.palette[6][0] = self.data[0x3F00]
        self.palette[6][1] = self.data[0x3F19]
        self.palette[6][2] = self.data[0x3F1A]
        self.palette[6][3] = self.data[0x3F1B]

        self.palette[7][0] = self.data[0x3F00]
        self.palette[7][1] = self.data[0x3F1D]
        self.palette[7][2] = self.data[0x3F1E]
        self.palette[7][3] = self.data[0x3F1F]
